import streamlit as st
import numpy as np
import plotly.graph_objects as go
from scipy.integrate import solve_ivp
import scipy.constants as const

st.title("üéØ –°–∏–º—É–ª—è—Ç–æ—Ä –†–µ–∑–µ—Ä—Ñ–æ—Ä–¥—ñ–≤—Å—å–∫–æ–≥–æ —Ä–æ–∑—Å—ñ—è–Ω–Ω—è")
st.write("–ú–æ–¥–µ–ª—é—î —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—é Œ±-—á–∞—Å—Ç–∏–Ω–∫–∏, —â–æ –Ω–∞–ª—ñ—Ç–∞—î –Ω–∞ –≤–∞–∂–∫–µ —è–¥—Ä–æ.")
st.latex(r"F(r) = \frac{1}{4\pi\epsilon_0} \frac{(Z_1 e)(Z_2 e)}{r^2}")

# --- –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
E_MeV = st.sidebar.slider("–ï–Ω–µ—Ä–≥—ñ—è Œ±-—á–∞—Å—Ç–∏–Ω–∫–∏ (E), –ú–µ–í", 1.0, 10.0, 5.0, 0.1)
Z1 = 2 # –ó–∞—Ä—è–¥ Œ±-—á–∞—Å—Ç–∏–Ω–∫–∏
Z2 = st.sidebar.slider("–ó–∞—Ä—è–¥ —è–¥—Ä–∞ –º—ñ—à–µ–Ω—ñ (Z‚ÇÇ)", 10, 100, 79, 1, 
                       help="79 - –ó–æ–ª–æ—Ç–æ (Au)")

# 'b' - –ø—Ä–∏—Ü—ñ–ª—å–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
b_fm = st.sidebar.slider("–ü—Ä–∏—Ü—ñ–ª—å–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä (b), —Ñ–º", 0.0, 100.0, 10.0, 1.0,
                         help="—Ñ–º = 10‚Åª¬π‚Åµ –º. b=0 - –ª–æ–±–æ–≤–µ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è.")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –≤ –°–Ü ---
E = E_MeV * 1e6 * const.electron_volt # –ï–Ω–µ—Ä–≥—ñ—è –≤ –î–∂–æ—É–ª—è—Ö
b = b_fm * 1e-15 # –ü—Ä–∏—Ü—ñ–ª—å–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –º–µ—Ç—Ä–∞—Ö
m = 4 * const.proton_mass # –ú–∞—Å–∞ Œ±-—á–∞—Å—Ç–∏–Ω–∫–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
k_e = 1 / (4 * np.pi * const.epsilon_0) # –ö—É–ª–æ–Ω—ñ–≤—Å—å–∫–∞ —Å—Ç–∞–ª–∞
ZeZ = (Z1 * const.e) * (Z2 * const.e) # –î–æ–±—É—Ç–æ–∫ –∑–∞—Ä—è–¥—ñ–≤

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å v‚ÇÄ (–∑ E = mv¬≤/2)
v0 = np.sqrt(2 * E / m)

# --- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ (–†–æ–∑–≤'—è–∑–æ–∫ –î–†) ---

# –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: —è–¥—Ä–æ –≤ (0,0)
# –ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∫–∏: (-x_start, b)
# –ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å: (v0, 0)
x_start = 20 * b if b > 1e-15 else 2e-13 # –ü–æ—á–∏–Ω–∞—î–º–æ "–∑–¥–∞–ª–µ–∫—É"

# y[0] = x (–ø–æ–∑–∏—Ü—ñ—è x)
# y[1] = y (–ø–æ–∑–∏—Ü—ñ—è y)
# y[2] = vx (—à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ x)
# y[3] = vy (—à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ y)
def model(t, y):
    x, y_pos, vx, vy = y
    r = np.sqrt(x**2 + y_pos**2)
    
    # –ö—É–ª–æ–Ω—ñ–≤—Å—å–∫–∞ —Å–∏–ª–∞ F = k_e * ZeZ / r¬≤
    # F_vec = F * (r_vec / r) = (F/r) * r_vec
    F_over_r = k_e * ZeZ / (r**3)
    
    # Fx = (F/r) * x, Fy = (F/r) * y
    # ax = Fx / m, ay = Fy / m
    ax = F_over_r * x / m
    ay = F_over_r * y_pos / m
    
    return [vx, vy, ax, ay]

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏
y0 = [-x_start, b, v0, 0]
# –ß–∞—Å —Å–∏–º—É–ª—è—Ü—ñ—ó (–ø–æ–∫–∏ –Ω–µ –ø—Ä–æ–ª–µ—Ç–∏—Ç—å –ø–æ–≤–∑)
t_span = [0, 2 * x_start / v0]

sol = solve_ivp(model, t_span, y0, method='RK45', 
                rtol=1e-6, atol=1e-9)

x_traj = sol.y[0] * 1e15 # –≤ —Ñ–µ–º—Ç–æ–º–µ—Ç—Ä–∏
y_traj = sol.y[1] * 1e15 # –≤ —Ñ–µ–º—Ç–æ–º–µ—Ç—Ä–∏

# --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—É—Ç–∞ —Ä–æ–∑—Å—ñ—è–Ω–Ω—è (—Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–π) ---
# b = (k_e * ZeZ) / (2 * E) * cot(theta/2)
cot_theta_half = (2 * E * b) / (k_e * ZeZ)
theta_rad = 2 * np.arctan(1 / cot_theta_half)
theta_deg = np.rad2deg(theta_rad)

st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
st.metric("–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–π –∫—É—Ç —Ä–æ–∑—Å—ñ—è–Ω–Ω—è (Œ∏)", f"{theta_deg:.2f}¬∞")
if b_fm == 0:
    st.info("–ü—Ä–∏ b=0 (–ª–æ–±–æ–≤–µ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è) —á–∞—Å—Ç–∏–Ω–∫–∞ –≤—ñ–¥–±–∏–≤–∞—î—Ç—å—Å—è –Ω–∞–∑–∞–¥ (Œ∏ = 180¬∞).")

# --- –ì—Ä–∞—Ñ—ñ–∫ ---
st.header("–¢—Ä–∞—î–∫—Ç–æ—Ä—ñ—è Œ±-—á–∞—Å—Ç–∏–Ω–∫–∏")

fig = go.Figure()

# –Ø–¥—Ä–æ –º—ñ—à–µ–Ω—ñ
fig.add_trace(go.Scatter(
    x=[0], y=[0], mode='markers',
    marker=dict(color='red', size=20, symbol='circle'),
    name=f'–Ø–¥—Ä–æ (Z={Z2})'
))

# –¢—Ä–∞—î–∫—Ç–æ—Ä—ñ—è —á–∞—Å—Ç–∏–Ω–∫–∏
fig.add_trace(go.Scatter(
    x=x_traj, y=y_traj, mode='lines',
    line=dict(color='blue', width=3),
    name='–¢—Ä–∞—î–∫—Ç–æ—Ä—ñ—è Œ±-—á–∞—Å—Ç–∏–Ω–∫–∏'
))

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∞—Å–∏–º–ø—Ç–æ—Ç–∞
fig.add_trace(go.Scatter(
    x=[-x_start*1e15, x_start*1e15], y=[b_fm, b_fm], mode='lines',
    line=dict(color='gray', width=1, dash='dot'),
    name='–ü—Ä–∏—Ü—ñ–ª—å–Ω–∞ –ª—ñ–Ω—ñ—è'
))

max_range = np.max(np.abs(np.concatenate([x_traj, y_traj]))) * 1.1
fig.update_layout(
    xaxis_title="x, —Ñ–º",
    yaxis_title="y, —Ñ–º",
    xaxis=dict(range=[-max_range, max_range]),
    yaxis=dict(range=[-max_range, max_range]),
    height=600
)
fig.update_yaxes(scaleanchor="x", scaleratio=1)
st.plotly_chart(fig, use_container_width=True)