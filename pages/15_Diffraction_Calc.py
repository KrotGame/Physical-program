import streamlit as st
import numpy as np

st.title("üî¨ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∏ —Ä–µ–Ω—Ç–≥–µ–Ω—ñ–≤—Å—å–∫–æ—ó –¥–∏—Ñ—Ä–∞–∫—Ü—ñ—ó")

# --- –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤—ñ –≤–∫–ª–∞–¥–∫–∏ ---
tab1, tab2 = st.tabs(["–ó–∞–∫–æ–Ω –ë—Ä–µ–≥–≥–∞", "–Ü–Ω–¥–µ–∫—Å–∏ –ú—ñ–ª–ª–µ—Ä–∞ (–¥–ª—è –∫—É–±. “ë—Ä–∞—Ç–æ–∫)"])

# --- –í–∫–ª–∞–¥–∫–∞ 1: –ó–∞–∫–æ–Ω –ë—Ä–µ–≥–≥–∞ ---
with tab1:
    st.header("–ó–∞–∫–æ–Ω –í—É–ª—å—Ñ–∞-–ë—Ä–µ–≥–≥–∞")
    st.latex(r"n\lambda = 2d \sin(\theta)")
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Bragg_diffraction.svg/600px-Bragg_diffraction.svg.png", 
             caption="–°—Ö–µ–º–∞ –¥–∏—Ñ—Ä–∞–∫—Ü—ñ—ó –ë—Ä–µ–≥–≥–∞", width=400)
    
    st.subheader("–©–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏?")
    calc_option = st.radio(
        "–û–±–µ—Ä—ñ—Ç—å –Ω–µ–≤—ñ–¥–æ–º—É –≤–µ–ª–∏—á–∏–Ω—É:",
        ('–ö—É—Ç (Œ∏)', '–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (Œª)', '–ú—ñ–∂–ø–ª–æ—â–∏–Ω–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (d)'), 
        horizontal=True
    )
    
    st.divider()
    
    if calc_option == '–ö—É—Ç (Œ∏)':
        n = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ä–∞–∫—Ü—ñ—ó (n)", min_value=1, value=1, step=1)
        lam = st.number_input("–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (Œª), √Ö (–ê–Ω–≥—Å—Ç—Ä–µ–º)", min_value=0.1, value=1.54)
        d = st.number_input("–ú—ñ–∂–ø–ª–æ—â–∏–Ω–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (d), √Ö", min_value=0.1, value=3.0)
        
        sin_theta = (n * lam) / (2 * d)
        if sin_theta > 1 or sin_theta < -1:
            st.error("–î–∏—Ñ—Ä–∞–∫—Ü—ñ—è –Ω–µ–º–æ–∂–ª–∏–≤–∞ (sin(Œ∏) > 1). –ó–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.")
        else:
            theta_rad = np.arcsin(sin_theta)
            theta_deg = np.rad2deg(theta_rad)
            st.metric("–ö—É—Ç –ë—Ä–µ–≥–≥–∞ (Œ∏)", f"{theta_deg:.3f}¬∞")
            
    elif calc_option == '–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (Œª)':
        n = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ä–∞–∫—Ü—ñ—ó (n)", min_value=1, value=1, step=1)
        d = st.number_input("–ú—ñ–∂–ø–ª–æ—â–∏–Ω–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (d), √Ö", min_value=0.1, value=3.0)
        theta_deg = st.number_input("–ö—É—Ç –ë—Ä–µ–≥–≥–∞ (Œ∏), –≥—Ä–∞–¥—É—Å–∏", min_value=0.1, max_value=90.0, value=15.0)
        
        theta_rad = np.deg2rad(theta_deg)
        lam = (2 * d * np.sin(theta_rad)) / n
        st.metric("–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (Œª)", f"{lam:.4f} √Ö")
        
    elif calc_option == '–ú—ñ–∂–ø–ª–æ—â–∏–Ω–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (d)':
        n = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ä–∞–∫—Ü—ñ—ó (n)", min_value=1, value=1, step=1)
        lam = st.number_input("–î–æ–≤–∂–∏–Ω–∞ —Ö–≤–∏–ª—ñ (Œª), √Ö", min_value=0.1, value=1.54)
        theta_deg = st.number_input("–ö—É—Ç –ë—Ä–µ–≥–≥–∞ (Œ∏), –≥—Ä–∞–¥—É—Å–∏", min_value=0.1, max_value=90.0, value=15.0)

        theta_rad = np.deg2rad(theta_deg)
        d = (n * lam) / (2 * np.sin(theta_rad))
        st.metric("–ú—ñ–∂–ø–ª–æ—â–∏–Ω–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (d)", f"{d:.4f} √Ö")

# --- –í–∫–ª–∞–¥–∫–∞ 2: –Ü–Ω–¥–µ–∫—Å–∏ –ú—ñ–ª–ª–µ—Ä–∞ ---
with tab2:
    st.header("–Ü–Ω–¥–µ–∫—Å–∏ –ú—ñ–ª–ª–µ—Ä–∞ —Ç–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (d_hkl)")
    st.write("–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –º—ñ–∂–ø–ª–æ—â–∏–Ω–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å 'd' –¥–ª—è –∫—É–±—ñ—á–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ –ú—ñ–ª–ª–µ—Ä–∞ (h, k, l).")
    st.latex(r"d_{hkl} = \frac{a}{\sqrt{h^2 + k^2 + l^2}}")
    
    st.subheader("–í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ")
    a = st.number_input("–ü–∞—Ä–∞–º–µ—Ç—Ä “ë—Ä–∞—Ç–∫–∏ (a), √Ö", min_value=0.1, value=4.0)
    
    col_h, col_k, col_l = st.columns(3)
    h = col_h.number_input("h", min_value=0, value=1, step=1)
    k = col_k.number_input("k", min_value=0, value=1, step=1)
    l = col_l.number_input("l", min_value=0, value=0, step=1)
    
    if h == 0 and k == 0 and l == 0:
        st.error("–Ü–Ω–¥–µ–∫—Å–∏ (0, 0, 0) –Ω–µ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å –ø–ª–æ—â–∏–Ω—É. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    else:
        d_hkl = a / np.sqrt(h**2 + k**2 + l**2)
        st.metric(f"–í—ñ–¥—Å—Ç–∞–Ω—å d_({h}{k}{l})", f"{d_hkl:.4f} √Ö")
        
    st.divider()
    
    st.subheader("–ë–æ–Ω—É—Å: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ñ–Ω–¥–µ–∫—Å—ñ–≤ –ú—ñ–ª–ª–µ—Ä–∞")
    st.write("–ó–Ω–∞—Ö–æ–¥–∏—Ç—å (hkl) –∑–∞ –ø–µ—Ä–µ—Ç–∏–Ω–∞–º–∏ –∑ –æ—Å—è–º–∏. –í–≤–µ–¥—ñ—Ç—å 'inf' –¥–ª—è –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ—Å—Ç—ñ.")
    
    col1, col2, col3 = st.columns(3)
    # –ú–Ü–ù–Ø–Ñ–ú–û number_input –ù–ê text_input
    int_a_str = col1.text_input("–ü–µ—Ä–µ—Ç–∏–Ω –ø–æ 'a'", value="1.0")
    int_b_str = col2.text_input("–ü–µ—Ä–µ—Ç–∏–Ω –ø–æ 'b'", value="inf")
    int_c_str = col3.text_input("–ü–µ—Ä–µ—Ç–∏–Ω –ø–æ 'c'", value="inf")
    
    if st.button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ (hkl)"):
        try:
            # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤ —á–∏—Å–ª–æ –∞–±–æ inf
            def parse_intercept(s):
                s_low = s.strip().lower()
                if s_low == 'inf' or s_low == 'infinity':
                    return np.inf
                val = float(s)
                if val == 0:
                    # –í–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—É –ø–µ—Ä–µ—Ö–æ–ø–∏—Ç—å 'try'
                    raise ValueError("–ü–µ—Ä–µ—Ç–∏–Ω 0") 
                return val
            
            int_a = parse_intercept(int_a_str)
            int_b = parse_intercept(int_b_str)
            int_c = parse_intercept(int_c_str)

            # 1. –ë–µ—Ä–µ–º–æ –æ–±–µ—Ä–Ω–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            with np.errstate(divide='ignore'): # –Ü–≥–Ω–æ—Ä—É—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ inf (1/inf = 0)
                inv_a = 1.0 / int_a
                inv_b = 1.0 / int_b
                inv_c = 1.0 / int_c
            
            # 2. –ó–≤–æ–¥–∏–º–æ –¥–æ –Ω–∞–π–º–µ–Ω—à–∏—Ö —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
            max_val = max(abs(inv_a), abs(inv_b), abs(inv_c))
            if max_val == 0:
                 st.error("–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏. –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π –ø–µ—Ä–µ—Ç–∏–Ω.")
            else:
                norm = np.array([inv_a, inv_b, inv_c]) / max_val
                
                # –®—É–∫–∞—î–º–æ –º–Ω–æ–∂–Ω–∏–∫, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ —ó—Ö —Ü—ñ–ª–∏–º–∏ (–¥–æ 10)
                multiplier = 1
                for i in range(1, 11):
                    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –¥–æ–ø—É—Å–∫–æ–º 1e-5
                    if np.allclose((norm * i) % 1, 0, atol=1e-5) or np.allclose((norm * i) % 1, 1, atol=1e-5):
                        multiplier = i
                        break
                
                # –û–∫—Ä—É–≥–ª—é—î–º–æ, —â–æ–± –ø–æ–∑–±—É—Ç–∏—Å—è –º–∞–ª–∏—Ö –ø–æ—Ö–∏–±–æ–∫ (–Ω–∞–ø—Ä., 2.9999 -> 3)
                h, k, l = np.round(norm * multiplier).astype(int)
                st.success(f"### –Ü–Ω–¥–µ–∫—Å–∏ –ú—ñ–ª–ª–µ—Ä–∞: ({h}, {k}, {l})")

        except ValueError as e:
            if "–ü–µ—Ä–µ—Ç–∏–Ω 0" in str(e):
                st.error("–ü–µ—Ä–µ—Ç–∏–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ 0 (–ø–ª–æ—â–∏–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ—á–∞—Ç–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç).")
            else:
                st.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–≤—ñ–¥. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä., '1.5') –∞–±–æ 'inf'.")