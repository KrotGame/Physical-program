import streamlit as st
import numpy as np

st.title("üí• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 1D –∑—ñ—Ç–∫–Ω–µ–Ω—å")
st.write("–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫—ñ–Ω—Ü–µ–≤—ñ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–ª—è –¥–≤–æ—Ö —Ç—ñ–ª –ø—ñ—Å–ª—è –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è.")

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ–æ—Ä–º—É –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É
with st.form(key='collision_form'):
    st.subheader("–¢—ñ–ª–æ 1 (–ª—ñ–≤–µ)")
    col1, col2 = st.columns(2)
    m1 = col1.number_input("–ú–∞—Å–∞ (m‚ÇÅ), –∫–≥", min_value=0.1, value=1.0)
    v1 = col2.number_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (v‚ÇÅ), –º/—Å", value=10.0, format="%.2f")

    st.subheader("–¢—ñ–ª–æ 2 (–ø—Ä–∞–≤–µ)")
    col3, col4 = st.columns(2)
    m2 = col3.number_input("–ú–∞—Å–∞ (m‚ÇÇ), –∫–≥", min_value=0.1, value=2.0)
    v2 = col4.number_input("–ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (v‚ÇÇ), –º/—Å", value=0.0, format="%.2f")

    st.subheader("–¢–∏–ø –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è")
    collision_type = st.radio(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è:",
        ('–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä—É–∂–Ω–µ', '–ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–ø—Ä—É–∂–Ω–µ (—Ç—ñ–ª–∞ –∑–ª–∏–ø–∞—é—Ç—å—Å—è)')
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    submit_button = st.form_submit_button(label='–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏!')

# --- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ (–≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏) ---
if submit_button:
    # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–º–ø—É–ª—å—Å —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—è
    p_initial = m1 * v1 + m2 * v2
    ke_initial = 0.5 * m1 * v1**2 + 0.5 * m2 * v2**2

    if collision_type == '–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä—É–∂–Ω–µ':
        # –§–æ—Ä–º—É–ª–∏ –¥–ª—è –ø—Ä—É–∂–Ω–æ–≥–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
        u1 = ((m1 - m2) * v1 + 2 * m2 * v2) / (m1 + m2)
        u2 = ((m2 - m1) * v2 + 2 * m1 * v1) / (m1 + m2)
        
        # –ö—ñ–Ω—Ü–µ–≤–∏–π —ñ–º–ø—É–ª—å—Å —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—è
        p_final = m1 * u1 + m2 * u2
        ke_final = 0.5 * m1 * u1**2 + 0.5 * m2 * u2**2

        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–ü—Ä—É–∂–Ω–µ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è)")
        st.metric("–ö—ñ–Ω—Ü–µ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¢—ñ–ª–∞ 1 (u‚ÇÅ)", f"{u1:.3f} –º/—Å")
        st.metric("–ö—ñ–Ω—Ü–µ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¢—ñ–ª–∞ 2 (u‚ÇÇ)", f"{u2:.3f} –º/—Å")
        
    elif collision_type == '–ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–ø—Ä—É–∂–Ω–µ (—Ç—ñ–ª–∞ –∑–ª–∏–ø–∞—é—Ç—å—Å—è)':
        # –¢—ñ–ª–∞ –∑–ª–∏–ø–∞—é—Ç—å—Å—è, –∫—ñ–Ω—Ü–µ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–¥–Ω–∞–∫–æ–≤–∞ (u)
        u = (m1 * v1 + m2 * v2) / (m1 + m2)
        u1 = u
        u2 = u
        
        # –ö—ñ–Ω—Ü–µ–≤–∏–π —ñ–º–ø—É–ª—å—Å —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—è
        p_final = (m1 + m2) * u
        ke_final = 0.5 * (m1 + m2) * u**2
        
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ (–ù–µ–ø—Ä—É–∂–Ω–µ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è)")
        st.metric("–ö—ñ–Ω—Ü–µ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –æ–±–æ—Ö —Ç—ñ–ª (u)", f"{u:.3f} –º/—Å")

    st.subheader("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–∫–æ–Ω—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
    st.info(f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–º–ø—É–ª—å—Å: {p_initial:.2f} –∫–≥¬∑–º/—Å\n\n"
            f"–ö—ñ–Ω—Ü–µ–≤–∏–π —ñ–º–ø—É–ª—å—Å: {p_final:.2f} –∫–≥¬∑–º/—Å")

    st.warning(f"–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è: {ke_initial:.2f} –î–∂\n\n"
               f"–ö—ñ–Ω—Ü–µ–≤–∞ –∫—ñ–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è: {ke_final:.2f} –î–∂")
    
    if collision_type == '–ê–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–ø—Ä—É–∂–Ω–µ (—Ç—ñ–ª–∞ –∑–ª–∏–ø–∞—é—Ç—å—Å—è)':
        st.write(f"–í—Ç—Ä–∞—Ç–∞ –µ–Ω–µ—Ä–≥—ñ—ó (–ø–µ—Ä–µ–π—à–ª–∞ –≤ —Ç–µ–ø–ª–æ): {ke_initial - ke_final:.2f} –î–∂")