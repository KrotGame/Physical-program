import streamlit as st
import numpy as np
import plotly.graph_objects as go
from scipy.integrate import solve_ivp # –ù–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–æ–∑–≤'—è–∑—É–≤–∞—á –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ä—ñ–≤–Ω—è–Ω—å

st.title("üåÄ –°–∏–º—É–ª—è—Ç–æ—Ä –≥–∞—Ä–º–æ–Ω—ñ—á–Ω–æ–≥–æ –æ—Å—Ü–∏–ª—è—Ç–æ—Ä–∞")
st.write("–ú–æ–¥–µ–ª—é—î —Ä—É—Ö –ø—Ä—É–∂–∏–Ω–Ω–æ–≥–æ –º–∞—è—Ç–Ω–∏–∫–∞ –∑ –º–æ–∂–ª–∏–≤–∏–º –∑–∞—Ç—É—Ö–∞–Ω–Ω—è–º.")

# --- –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Å—Ü–∏–ª—è—Ç–æ—Ä–∞")

m = st.sidebar.slider("–ú–∞—Å–∞ (m), –∫–≥", 0.1, 10.0, 1.0)
k = st.sidebar.slider("–ñ–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å –ø—Ä—É–∂–∏–Ω–∏ (k), –ù/–º", 0.1, 50.0, 10.0)
b = st.sidebar.slider("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–Ω—è (b)", 0.0, 5.0, 0.5, 
                    help="b=0: –Ω–µ–º–∞—î –∑–∞—Ç—É—Ö–∞–Ω–Ω—è. b > 0: –∫–æ–ª–∏–≤–∞–Ω–Ω—è –∑–∞—Ç—É—Ö–∞—é—Ç—å.")

st.sidebar.header("–ü–æ—á–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏")
x0 = st.sidebar.slider("–ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–º—ñ—â–µ–Ω–Ω—è (x‚ÇÄ), –º", -5.0, 5.0, 2.0)
v0 = st.sidebar.slider("–ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (v‚ÇÄ), –º/—Å", -5.0, 5.0, 0.0)

t_max = st.sidebar.slider("–ß–∞—Å —Å–∏–º—É–ª—è—Ü—ñ—ó (T), —Å", 5.0, 100.0, 20.0)

# --- –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ ---

# –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è: m*x'' + b*x' + k*x = 0
# –ü–µ—Ä–µ–ø–∏—à–µ–º–æ —è–∫ —Å–∏—Å—Ç–µ–º—É:
# y[0] = x
# y[1] = x' (—à–≤–∏–¥–∫—ñ—Å—Ç—å)
#
# y[0]' = y[1]
# y[1]' = (-b*y[1] - k*y[0]) / m

def model(t, y):
    x, v = y
    dxdt = v
    dvdt = (-b * v - k * x) / m
    return [dxdt, dvdt]

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏
y0 = [x0, v0]

# –ß–∞—Å–æ–≤—ñ —Ç–æ—á–∫–∏
t_span = [0, t_max]
t_eval = np.linspace(t_span[0], t_span[1], 500) # 500 —Ç–æ—á–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞

# –†–æ–∑–≤'—è–∑—É—î–º–æ –î–†
sol = solve_ivp(model, t_span, y0, t_eval=t_eval)

x_values = sol.y[0]
v_values = sol.y[1]
t_values = sol.t

# --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---

# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
omega0 = np.sqrt(k / m) # –í–ª–∞—Å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞
st.metric("–í–ª–∞—Å–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ (œâ‚ÇÄ)", f"{omega0:.2f} —Ä–∞–¥/—Å")

# --- –ì—Ä–∞—Ñ—ñ–∫–∏ ---
st.header("–ì—Ä–∞—Ñ—ñ–∫–∏ —Ä—É—Ö—É")

fig1 = go.Figure()
fig1.add_trace(go.Scatter(x=t_values, y=x_values, mode='lines', name='–ó–º—ñ—â–µ–Ω–Ω—è (x)'))
fig1.update_layout(
    title="–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–º—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ —á–∞—Å—É x(t)",
    xaxis_title="–ß–∞—Å (t), —Å",
    yaxis_title="–ó–º—ñ—â–µ–Ω–Ω—è (x), –º"
)
st.plotly_chart(fig1, use_container_width=True)

fig2 = go.Figure()
fig2.add_trace(go.Scatter(x=x_values, y=v_values, mode='lines', name='–§–∞–∑–æ–≤–∞ —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—è'))
fig2.update_layout(
    title="–§–∞–∑–æ–≤–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (v(x))",
    xaxis_title="–ó–º—ñ—â–µ–Ω–Ω—è (x), –º",
    yaxis_title="–®–≤–∏–¥–∫—ñ—Å—Ç—å (v), –º/—Å"
)
fig2.update_yaxes(scaleanchor="x", scaleratio=1)
st.plotly_chart(fig2, use_container_width=True)